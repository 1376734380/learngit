#include <iostream>
#include <cstring>
#include <algorithm>

using namespace std;

const int N = 1e4 + 10;

class DHCP {
private:
    struct IP {
        int state;      // 0:未分配，1:待分配，2:占用，3:过期
        int times;      // 过期时间
        string ocupy;   // 占用者
    } id[N];

    int n, m, t_def, t_max, t_min;
    string dhcp;

public:
    void init(int n, int t_def, int t_max, int t_min, const string& dhcp) {
        this->n = n;
        this->t_def = t_def;
        this->t_max = t_max;
        this->t_min = t_min;
        this->dhcp = dhcp;
    }

    void update(int t) {
        for (int i = 1; i <= n; i++) {
            if (id[i].times && id[i].times <= t) {
                if (id[i].state == 1) {
                    id[i].state = 0;
                    id[i].ocupy = "";
                    id[i].times = 0;
                }
                else {
                    id[i].state = 3;
                    id[i].times = 0;
                }
            }
        }
    }

    int get_id_ip(const string& address) {
        for (int i = 1; i <= n; i++) {
            if (id[i].ocupy == address) return i;
        }
        return 0;
    }

    int get_id_state(int state) {
        for (int i = 1; i <= n; i++) {
            if (id[i].state == state) return i;
        }
        return 0;
    }

    void process_message(int tc, const string& server, const string& client, const string& type, int address, int t) {
        update(tc);

        if (client != dhcp && client != "*") {
            if (type != "REQ") return;
        }

        if (type != "REQ" && type != "DIS") return;
        if (client == "*" && type != "DIS" || client == dhcp && type == "DIS") return;

        if (type == "DIS") {
            int k = get_id_ip(server);
            if (!k) k = get_id_state(0);
            if (!k) k = get_id_state(3);
            if (!k) return;

            id[k].state = 1;
            id[k].ocupy = server;

            if (t == 0) {
                id[k].times = tc + t_def;
            }
            else {
                int tt = t - tc;
                tt = min(tt, t_max);
                tt = max(tt, t_min);
                id[k].times = tt + tc;
            }
            cout << dhcp << " " << server << " OFR " << k << " " << id[k].times << endl;

        }
        else if (type == "REQ") {
            if (client != dhcp) {
                for (int i = 1; i <= n; i++) {
                    if (id[i].ocupy == server && id[i].state == 1) {
                        id[i].state = 0;
                        id[i].ocupy = "";
                        id[i].times = 0;
                    }
                }
                return;
            }

            if (!(address >= 1 && address <= n && id[address].ocupy == server)) {
                cout << dhcp << " " << server << " NAK " << address << " " << 0 << endl;
                return;
            }

            id[address].state = 2;

            if (t == 0) {
                id[address].times = tc + t_def;
            }
            else {
                int tt = t - tc;
                tt = min(tt, t_max);
                tt = max(tt, t_min);
                id[address].times = tt + tc;
            }
            cout << dhcp << " " << server << " ACK " << address << " " << id[address].times << endl;
        }
    }
};

int main() {
    int n, t_def, t_max, t_min, m;
    string dhcp;

    cin >> n >> t_def >> t_max >> t_min >> dhcp;
    cin >> m;

    DHCP dhcp_server;
    dhcp_server.init(n, t_def, t_max, t_min, dhcp);

    while (m--) {
        int tc, address, t;
        string server, client, type;

    }

    return 0;
}